{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 9a87e7a1854307776f26","webpack:///./src/index.js","webpack:///./src/JsSpeechRecognizer.js"],"names":["HotwordSpeechRecognition","keywordSpottingMinConfidence","initialTimeout","timeout","lang","models","_onKeywordSpottedCallback","result","_recognizing","onKeywordSpotted","_recognition","start","_onStart","_stopRecognition","initialTimeoutSecs","_onResult","interimTranscript","i","event","resultIndex","results","length","isFinal","_finalTranscript","transcript","onPartialResult","_onEnd","onFinalResult","hwRecognition","numGroups","groupSize","keywordSpottedCallback","openMic","timeoutSecs","_stopRecognitionTimeout","window","recognition","webkitSpeechRecognition","continuous","interimResults","onstart","onresult","onend","_hwRecognition","word","isRecording","stopRecording","startTrainingRecording","onTrainingStart","wordBuffer","recordingId","stop","onTrainingStop","playTrainingBuffer","deleteTrainingBuffer","data","modelBuffer","generateModel","clearTimeout","setTimeout","startKeywordSpottingRecording","JsSpeechRecognizer","RecordingEnum","Object","freeze","RecognitionModel","recordingBufferArray","currentRecordingBuffer","groupedValues","keywordSpottingGroupBuffer","keywordSpottingRecordingBuffer","model","recordingState","NOT_RECORDING","useRecognitionModel","COMPOSITE","audioCtx","AudioContext","webkitAudioContext","findDistanceForKeywordSpotting","generateFindDistanceForKeywordSpotting","findDistanceForKeywordSpotting0","findDistanceForKeywordSpotting5","findDistanceForKeywordSpotting15","analyser","createAnalyser","minDecibels","maxDecibels","smoothingTimeConstant","fftSize","scriptNode","createScriptProcessor","onaudioprocess","generateOnAudioProcess","minPower","keywordSpottingBufferCount","keywordSpottingLastVoiceActivity","keywordSpottingMaxVoiceActivityGap","prototype","constraints","navigator","getUserMedia","successCallback","errorCallback","_this","stream","source","createMediaStreamSource","connect","destination","error","console","curWord","resetBuffers","TRAINING","push","startRecognitionRecording","RECOGNITION","KEYWORD_SPOTTING","startKeywordSpottingNoisyRecording","KEYWORD_SPOTTING_NOISY","concat","apply","normalizeInput","slice","index","playMonoAudio","playBuffer","channels","frameCount","myArrayBuffer","createBuffer","sampleRate","channel","nowBuffering","getChannelData","playSource","createBufferSource","buffer","getTopRecognitionHypotheses","numResults","findClosestMatch","findDistance","j","k","key","averageModel","TRAINED","average","averageInterpolation","Math","max","entryOne","entryTwo","AVERAGE","audioProcessingEvent","dataArray","Uint8Array","getByteFrequencyData","inputBuffer","leftChannel","curFrame","Float32Array","power","Array","groups","peakGroupValue","curPos","now","Date","getTime","keywordSpottingProcessFrame","computedLength","allResults","recordingLength","workingGroupBuffer","keywordDetectedNoisy","keywordDetectedNormal","undefined","audioBuffer","confidence","allResults15","allResults15MinConfidence","allResults5","allResults5MinConfidence","allResults0","allResults0MinConfidence","allResultsMinConfidence","noise","input","floor","speechModel","findDistanceFunction","curDistance","curConfidence","calcConfidence","curNoise","calculateNoise","newResult","match","sort","a","b","modelEntry","distance","modelVal","inputVal","abs","modelEntryGreaterThanVal","sum","sumIn","sumEntry"],"mappings":"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","file":"HotwordSpeechRecognition.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"HotwordSpeechRecognition\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"HotwordSpeechRecognition\"] = factory();\n\telse\n\t\troot[\"HotwordSpeechRecognition\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9a87e7a1854307776f26","import JsSpeechRecognizer from './JsSpeechRecognizer';\n\nexport default class HotwordSpeechRecognition {\n\n  constructor({\n    keywordSpottingMinConfidence = 0.5,\n    initialTimeout = 5,\n    timeout = 1.5,\n    lang = 'en-US',\n    models = {},\n  }) {\n    const hwRecognition = new JsSpeechRecognizer();\n\n    hwRecognition.numGroups = 60;\n    hwRecognition.groupSize = 5;\n    hwRecognition.keywordSpottingMinConfidence = keywordSpottingMinConfidence;\n    hwRecognition.keywordSpottedCallback = this._onKeywordSpottedCallback;\n    hwRecognition.lang = lang;\n    hwRecognition.openMic();\n\n    this.timeoutSecs = timeout;\n    this.initialTimeoutSecs = initialTimeout;\n\n    this._stopRecognitionTimeout = null;\n    this._recognizing = false;\n    this._finalTranscript = '';\n\n    if ('webkitSpeechRecognition' in window) {\n      /* global webkitSpeechRecognition */\n      /* eslint new-cap: [\"error\", { \"newIsCap\": false }] */\n      const recognition = new webkitSpeechRecognition();\n\n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.lang = 'en-US';\n\n      recognition.onstart = this._onStart;\n      recognition.onresult = this._onResult;\n      recognition.onend = this._onEnd;\n      this._recognition = recognition;\n    }\n\n    this._hwRecognition = hwRecognition;\n  }\n\n  isSupported() {\n    return ('webkitSpeechRecognition' in window);\n  }\n\n  onKeywordSpotted() {\n    // overwrite or override\n  }\n\n  onPartialResult() {\n    // overwrite or override\n  }\n\n  onFinalResult() {\n    // overwrite or override\n  }\n\n  onTrainingStart() {\n    // overwrite or override\n  }\n\n  onTrainingStop() {\n    // overwrite or override\n  }\n\n  startTraining(word) {\n    if (this._hwRecognition.isRecording()) {\n      this._hwRecognition.stopRecording();\n    }\n    this._hwRecognition.startTrainingRecording(word);\n    this.onTrainingStart(word);\n  }\n\n  stopTraining() {\n    const wordBuffer = this._hwRecognition.wordBuffer;\n    const recordingId = this.stop();\n\n    this.onTrainingStop(wordBuffer[wordBuffer.length - 1], recordingId);\n    return recordingId;\n  }\n\n  playTrainingBuffer(recordingId) {\n    return this._hwRecognition.playTrainingBuffer(recordingId);\n  }\n\n  deleteTrainingBuffer(recordingId) {\n    return this._hwRecognition.deleteTrainingBuffer(recordingId);\n  }\n\n  setTrainingData(data) {\n    this._hwRecognition.modelBuffer = data.modelBuffer;\n    this._hwRecognition.wordBuffer = data.wordBuffer;\n  }\n\n  getTrainingData() {\n    return {\n      modelBuffer: this._hwRecognition.modelBuffer,\n      wordBuffer: this._hwRecognition.wordBuffer,\n    };\n  }\n\n  generateModel() {\n    this._hwRecognition.generateModel();\n  }\n\n  _onKeywordSpottedCallback = (result) => {\n    if (!this._recognizing) {\n      this.onKeywordSpotted(result);\n      this._recognition.start();\n    }\n  }\n\n  /* SpeechRecognizer Callbacks */\n  _onStart = () => {\n    this._recognizing = true;\n    this._stopRecognition(this.initialTimeoutSecs);\n  }\n\n  _onResult = () => {\n    let interimTranscript = '';\n\n    for (let i = event.resultIndex; i < event.results.length; ++i) {\n      if (event.results[i].isFinal) {\n        this._finalTranscript += event.results[i][0].transcript;\n      } else {\n        interimTranscript += event.results[i][0].transcript;\n      }\n    }\n    if (interimTranscript.length) {\n      this.onPartialResult(interimTranscript);\n    }\n    this._stopRecognition();\n  }\n\n  _onEnd = () => {\n    this._recognizing = false;\n    this.onFinalResult(this._finalTranscript);\n    this._finalTranscript = '';\n  }\n\n  /* SpeechRecognizer Callbacks End */\n\n  _stopRecognition(timeout) {\n    clearTimeout(this._stopRecognitionTimeout);\n    this._stopRecognitionTimeout = setTimeout(() => {\n      this._recognition.stop();\n    }, (timeout || this.timeoutSecs) * 1000);\n  }\n\n  start() {\n    if (!this._hwRecognition.isRecording()) {\n      this._hwRecognition.startKeywordSpottingRecording();\n    }\n  }\n\n  stop() {\n    if (this._hwRecognition.isRecording()) {\n      return this._hwRecognition.stopRecording();\n    }\n    return -1;\n  }\n\n  isRecording() {\n    return this._hwRecognition.isRecording();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\n * JavaScript based speech recognizer.\n *\n * Copyright 2016, Dominic Winkelman\n * Free to use under the Apache 2.0 License\n *\n * https://github.com/dreamdom/JsSpeechRecognizer\n *\n * Requires the WebRTC adapter.js file.\n */\n\n/**\n * Constructor for JsSpeechRecognizer.\n * Sets a number of parameters to default values.\n */\nfunction JsSpeechRecognizer() {\n\n    // Constants\n    this.RecordingEnum = { \"NOT_RECORDING\": 0, \"TRAINING\": 1, \"RECOGNITION\": 2, \"KEYWORD_SPOTTING\": 3, \"KEYWORD_SPOTTING_NOISY\": 4 };\n    Object.freeze(this.RecordingEnum);\n    this.RecognitionModel = { \"TRAINED\": 0, \"AVERAGE\": 1, \"COMPOSITE\": 2 };\n    Object.freeze(this.RecognitionModel);\n\n    // Variables for recording data\n    this.recordingBufferArray = [];\n    this.currentRecordingBuffer = [];\n    this.wordBuffer = [];\n    this.modelBuffer = [];\n    this.groupedValues = [];\n    this.keywordSpottingGroupBuffer = [];\n    this.keywordSpottingRecordingBuffer = [];\n\n    // The speech recognition model\n    this.model = {};\n\n    this.recordingState = this.RecordingEnum.NOT_RECORDING;\n    this.useRecognitionModel = this.RecognitionModel.COMPOSITE;\n\n    // Get an audio context\n    this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n\n\n    // Generate functions for keyword spotting\n    this.findDistanceForKeywordSpotting = this.generateFindDistanceForKeywordSpotting(-1);\n    this.findDistanceForKeywordSpotting0 = this.generateFindDistanceForKeywordSpotting(0);\n    this.findDistanceForKeywordSpotting5 = this.generateFindDistanceForKeywordSpotting(5);\n    this.findDistanceForKeywordSpotting15 = this.generateFindDistanceForKeywordSpotting(15);\n\n\n    // Adjustable parameters\n\n    // Create an analyser\n    this.analyser = this.audioCtx.createAnalyser();\n    this.analyser.minDecibels = -80;\n    this.analyser.maxDecibels = -10;\n    this.analyser.smoothingTimeConstant = 0;\n    this.analyser.fftSize = 1024;\n\n    // Create the scriptNode\n    this.scriptNode = this.audioCtx.createScriptProcessor(this.analyser.fftSize, 1, 1);\n    this.scriptNode.onaudioprocess = this.generateOnAudioProcess();\n\n    // Parameters for the model calculation\n    this.numGroups = 25;\n    this.groupSize = 10;\n    this.minPower = 0.01;\n\n    // Keyword spotting parameters\n    this.keywordSpottingMinConfidence = 0.50;\n    this.keywordSpottingBufferCount = 80;\n    this.keywordSpottingLastVoiceActivity = 0;\n    this.keywordSpottingMaxVoiceActivityGap = 300;\n    this.keywordSpottedCallback = null;\n\n}\n\n/**\n * Requests access to the microphone.\n * @public\n */\nJsSpeechRecognizer.prototype.openMic = function() {\n\n    var constraints = {\n        \"audio\": true\n    };\n\n    navigator.getUserMedia(constraints, successCallback, errorCallback);\n\n    var _this = this;\n    // Acess to the microphone was granted\n    function successCallback(stream) {\n        _this.stream = stream;\n        _this.source = _this.audioCtx.createMediaStreamSource(stream);\n\n        _this.source.connect(_this.analyser);\n        _this.analyser.connect(_this.scriptNode);\n\n        // This is needed for chrome\n        _this.scriptNode.connect(_this.audioCtx.destination);\n    }\n\n    function errorCallback(error) {\n        console.error('navigator.getUserMedia error: ', error);\n    }\n};\n\n/**\n * Returns false if the recognizer is not recording. True otherwise.\n * @public.\n */\nJsSpeechRecognizer.prototype.isRecording = function() {\n    return (this.recordingState !== this.RecordingEnum.NOT_RECORDING);\n};\n\n/**\n * Starts recording in TRAINING mode.\n * @public\n */\nJsSpeechRecognizer.prototype.startTrainingRecording = function(curWord) {\n    this.resetBuffers();\n    this.recordingState = this.RecordingEnum.TRAINING;\n    this.wordBuffer.push(curWord);\n};\n\n/**\n * Starts recording in RECOGNITION mode.\n * @public\n */\nJsSpeechRecognizer.prototype.startRecognitionRecording = function() {\n    this.resetBuffers();\n    this.recordingState = this.RecordingEnum.RECOGNITION;\n};\n\n/**\n * Starts recording in KEYWORD_SPOTTING mode.\n * @public\n */\nJsSpeechRecognizer.prototype.startKeywordSpottingRecording = function() {\n    this.resetBuffers();\n    this.recordingState = this.RecordingEnum.KEYWORD_SPOTTING;\n};\n\n/**\n * Starts a recording in KEYWORD_SPOTTING_NOISY mode.\n * @public\n */\nJsSpeechRecognizer.prototype.startKeywordSpottingNoisyRecording = function() {\n    this.resetBuffers();\n    this.recordingState = this.RecordingEnum.KEYWORD_SPOTTING_NOISY;\n};\n\n/**\n * Stops recording.\n * @return {Number} the length of the training buffer.\n * @public\n */\nJsSpeechRecognizer.prototype.stopRecording = function() {\n\n    this.groupedValues = [].concat.apply([], this.groupedValues);\n    this.normalizeInput(this.groupedValues);\n\n    // If we are training we want to save to the recongition model buffer\n    if (this.recordingState === this.RecordingEnum.TRAINING) {\n        this.recordingBufferArray.push(this.currentRecordingBuffer.slice(0));\n        this.modelBuffer.push(this.groupedValues.slice(0));\n    }\n\n    this.recordingState = this.RecordingEnum.NOT_RECORDING;\n\n    return this.recordingBufferArray.length;\n};\n\n/**\n * Plays training audio for the specified index.\n * @param {Number} index\n * @public\n */\nJsSpeechRecognizer.prototype.playTrainingBuffer = function(index) {\n    this.playMonoAudio(this.recordingBufferArray[index]);\n};\n\n/**\n * Delete training data for the specified index.\n * @param {Number} index\n * @public\n */\nJsSpeechRecognizer.prototype.deleteTrainingBuffer = function(index) {\n    this.modelBuffer[index] = null;\n};\n\n/**\n * Play mono audio.\n * @param {Array} playBuffer\n * @public\n */\nJsSpeechRecognizer.prototype.playMonoAudio = function(playBuffer) {\n\n    var channels = 1;\n    var frameCount = playBuffer.length;\n    var myArrayBuffer = this.audioCtx.createBuffer(channels, frameCount, this.audioCtx.sampleRate);\n\n    for (var channel = 0; channel < channels; channel++) {\n        var nowBuffering = myArrayBuffer.getChannelData(channel);\n        for (var i = 0; i < frameCount; i++) {\n            nowBuffering[i] = playBuffer[i];\n        }\n    }\n\n    var playSource = this.audioCtx.createBufferSource();\n    playSource.buffer = myArrayBuffer;\n    playSource.connect(this.audioCtx.destination);\n    playSource.start();\n};\n\n/**\n * Returns an array of the top recognition hypotheses.\n * @param {Number} numResults\n * @return {Array}\n * @public\n */\nJsSpeechRecognizer.prototype.getTopRecognitionHypotheses = function(numResults) {\n    return this.findClosestMatch(this.groupedValues, numResults, this.model, this.findDistance);\n};\n\n/**\n * Method to generate the new speech recognition model from the training data.\n * @public\n */\nJsSpeechRecognizer.prototype.generateModel = function() {\n\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var key = \"\";\n    var averageModel = {};\n\n    // Reset the model\n    this.model = {};\n\n    for (i = 0; i < this.wordBuffer.length; i++) {\n        key = this.wordBuffer[i];\n        this.model[key] = [];\n    }\n\n    for (i = 0; i < this.modelBuffer.length; i++) {\n        if (this.modelBuffer[i] !== null) {\n            key = this.wordBuffer[i];\n            this.model[key].push(this.modelBuffer[i]);\n        }\n    }\n\n    // If we are only using the trained entries, no need to anything else\n    if (this.useRecognitionModel === this.RecognitionModel.TRAINED) {\n        return;\n    }\n\n    // Average Model\n    // Holds one entry for each key. That entry is the average of all the entries in the model\n    for (key in this.model) {\n        var average = [];\n        for (i = 0; i < this.model[key].length; i++) {\n            for (j = 0; j < this.model[key][i].length; j++) {\n                average[j] = (average[j] || 0) + (this.model[key][i][j] / this.model[key].length);\n            }\n        }\n\n        averageModel[key] = [];\n        averageModel[key].push(average);\n    }\n\n    // Interpolation - Take the average of each pair of entries for a key and\n    // add it to the average model\n    for (key in this.model) {\n\n        var averageInterpolation = [];\n        for (k = 0; k < this.model[key].length; k++) {\n            for (i = k + 1; i < this.model[key].length; i++) {\n\n                averageInterpolation = [];\n                for (j = 0; j < Math.max(this.model[key][k].length, this.model[key][i].length); j++) {\n                    var entryOne = this.model[key][k][j] || 0;\n                    var entryTwo = this.model[key][i][j] || 0;\n                    averageInterpolation[j] = (entryOne + entryTwo) / 2;\n                }\n\n                averageModel[key].push(averageInterpolation);\n            }\n        }\n    }\n\n    if (this.useRecognitionModel === this.RecognitionModel.AVERAGE) {\n        this.model = averageModel;\n    } else if (this.useRecognitionModel === this.RecognitionModel.COMPOSITE) {\n        // Merge the average model into the model\n        for (key in this.model) {\n            this.model[key] = this.model[key].concat(averageModel[key]);\n        }\n    }\n\n};\n\n\n// Private internal functions\n\n/**\n * Resets the recording buffers.\n * @private\n */\nJsSpeechRecognizer.prototype.resetBuffers = function() {\n    this.currentRecordingBuffer = [];\n    this.groupedValues = [];\n\n    this.keywordSpottingGroupBuffer = [];\n    this.keywordSpottingRecordingBuffer = [];\n};\n\n// Audio Processing functions\n\n/**\n * Generates an audioProcess function.\n * @return {Function}\n * @private\n */\nJsSpeechRecognizer.prototype.generateOnAudioProcess = function() {\n    var _this = this;\n    return function(audioProcessingEvent) {\n\n        var i = 0;\n\n        // If we aren't recording, don't do anything\n        if (_this.recordingState === _this.RecordingEnum.NOT_RECORDING) {\n            return;\n        }\n\n        // get the fft data\n        var dataArray = new Uint8Array(_this.analyser.fftSize);\n        _this.analyser.getByteFrequencyData(dataArray);\n\n        // Find the max in the fft array\n        var max = Math.max.apply(Math, dataArray);\n\n        // If the max is zero ignore it.\n        if (max === 0) {\n            return;\n        }\n\n        // Get the audio data. For simplicity just take one channel\n        var inputBuffer = audioProcessingEvent.inputBuffer;\n        var leftChannel = inputBuffer.getChannelData(0);\n\n        // Calculate the power\n        var curFrame = new Float32Array(leftChannel);\n        var power = 0;\n        for (i = 0; i < curFrame.length; i++) {\n            power += curFrame[i] * curFrame[i];\n        }\n\n        // Check for the proper power level\n        if (power < _this.minPower) {\n            return;\n        }\n\n        // Save the data for playback.\n        Array.prototype.push.apply(_this.currentRecordingBuffer, curFrame);\n\n        // Normalize and Group the frequencies\n        var groups = [];\n\n        for (i = 0; i < _this.numGroups; i++) {\n            var peakGroupValue = 0;\n            for (var j = 0; j < _this.groupSize; j++) {\n                var curPos = (_this.groupSize * i) + j;\n\n                // Keep the peak normalized value for this group\n                if (dataArray[curPos] > peakGroupValue) {\n                    peakGroupValue = dataArray[curPos];\n                }\n\n            }\n            groups.push(peakGroupValue);\n        }\n\n        // Depending on the state, handle the data differently\n        if (_this.recordingState === _this.RecordingEnum.KEYWORD_SPOTTING || _this.recordingState === _this.RecordingEnum.KEYWORD_SPOTTING_NOISY) {\n\n            // Check if we should reset the buffers\n            var now = new Date().getTime();\n            if (now - _this.keywordSpottingLastVoiceActivity > _this.keywordSpottingMaxVoiceActivityGap) {\n                _this.resetBuffers();\n            }\n            _this.keywordSpottingLastVoiceActivity = now;\n\n            _this.keywordSpottingProcessFrame(groups, curFrame);\n        } else {\n            _this.groupedValues.push(groups);\n        }\n\n    };\n};\n\n/**\n * Process a new frame of data while in recording state KEYWORD_SPOTTING.\n * @param{Array} groups - the group data for the frame\n * @param{Array} curFrame - the raw audio data for the frame\n * @private\n */\nJsSpeechRecognizer.prototype.keywordSpottingProcessFrame = function(groups, curFrame) {\n\n    var computedLength;\n    var key;\n    var allResults = [];\n    var recordingLength;\n    var workingGroupBuffer = [];\n\n    // Append to the keywordspotting buffer\n    this.keywordSpottingGroupBuffer.push(groups);\n    this.keywordSpottingGroupBuffer = [].concat.apply([], this.keywordSpottingGroupBuffer);\n\n    // Trim the buffer if necessary\n    computedLength = (this.keywordSpottingBufferCount * this.numGroups);\n    if (this.keywordSpottingGroupBuffer.length > computedLength) {\n        this.keywordSpottingGroupBuffer = this.keywordSpottingGroupBuffer.slice(this.keywordSpottingGroupBuffer.length - computedLength, this.keywordSpottingGroupBuffer.length);\n    }\n\n    // Save the audio data\n    Array.prototype.push.apply(this.keywordSpottingRecordingBuffer, curFrame);\n\n    // Trim the buffer if necessary\n    computedLength = (this.keywordSpottingBufferCount * this.analyser.fftSize);\n    if (this.keywordSpottingRecordingBuffer.length > computedLength) {\n        this.keywordSpottingRecordingBuffer = this.keywordSpottingRecordingBuffer.slice(this.keywordSpottingRecordingBuffer.length - computedLength, this.keywordSpottingRecordingBuffer.length);\n    }\n\n    // Copy buffer, and normalize it, and use it to find the closest match\n    workingGroupBuffer = this.keywordSpottingGroupBuffer.slice(0);\n    this.normalizeInput(workingGroupBuffer);\n\n    // Use the correct keyword spotting function\n    if (this.recordingState === this.RecordingEnum.KEYWORD_SPOTTING_NOISY) {\n        allResults = this.keywordDetectedNoisy(workingGroupBuffer);\n    } else {\n        allResults = this.keywordDetectedNormal(workingGroupBuffer);\n    }\n\n\n    // See if a keyword was spotted\n    if (allResults !== null && allResults[0] !== undefined) {\n\n        // Save the audio\n        recordingLength = (allResults[0].frameCount / this.numGroups) * this.analyser.fftSize;\n\n        if (recordingLength > this.keywordSpottingRecordingBuffer.length) {\n            recordingLength = this.keywordSpottingRecordingBuffer.length;\n        }\n\n        allResults[0].audioBuffer = this.keywordSpottingRecordingBuffer.slice(this.keywordSpottingRecordingBuffer.length - recordingLength, this.keywordSpottingRecordingBuffer.length);\n\n        this.resetBuffers();\n        if (this.keywordSpottedCallback !== undefined && this.keywordSpottedCallback !== null) {\n            this.keywordSpottedCallback(allResults[0]);\n        }\n\n    }\n\n};\n\n// Keyword spotting functions\n\n/**\n * Analyzes a buffer to determine if a keyword has been found.\n * Will return an array if a keyword was found, null otherwise.\n *\n * @param {Array} workingGroupBuffer\n * @return {Array|null}\n * @private\n */\nJsSpeechRecognizer.prototype.keywordDetectedNormal = function(workingGroupBuffer) {\n    var allResults = {};\n\n    allResults = this.findClosestMatch(workingGroupBuffer, 1, this.model, this.findDistanceForKeywordSpotting);\n\n    if (allResults[0] !== undefined && allResults[0].confidence > this.keywordSpottingMinConfidence) {\n        return allResults;\n    }\n\n    return null;\n};\n\n/**\n * Analyzes a buffer to determine if a keyword has been found.\n * Will return an array if a keyword was found, null otherwise.\n * Designed to adjust for different levels of noise.\n *\n * @param {Array} workingGroupBuffer\n * @return {Array|null}\n * @private\n */\nJsSpeechRecognizer.prototype.keywordDetectedNoisy = function(workingGroupBuffer) {\n\n    // TODO: Make it possible for a user to specify the number of keyword spotting functions\n    // And change this duplicated code to a loop!\n\n    var allResults15 = {};\n    var allResults15MinConfidence = this.keywordSpottingMinConfidence;\n\n    allResults15 = this.findClosestMatch(workingGroupBuffer, 1, this.model, this.findDistanceForKeywordSpotting15);\n\n    if (allResults15[0].confidence <= allResults15MinConfidence) {\n        return null;\n    }\n\n\n    var allResults5 = {};\n    var allResults5MinConfidence = this.keywordSpottingMinConfidence - 0.1;\n\n    allResults5 = this.findClosestMatch(workingGroupBuffer, 1, this.model, this.findDistanceForKeywordSpotting5);\n\n    if (allResults5[0].confidence <= allResults5MinConfidence) {\n        return null;\n    }\n\n\n    var allResults0 = {};\n    var allResults0MinConfidence = this.keywordSpottingMinConfidence - 0.15;\n\n    allResults0 = this.findClosestMatch(workingGroupBuffer, 1, this.model, this.findDistanceForKeywordSpotting0);\n\n    if (allResults0[0].confidence <= allResults0MinConfidence) {\n        return null;\n    }\n\n\n    // finally, run the normal check\n    var allResults = {};\n\n    allResults = this.findClosestMatch(workingGroupBuffer, 1, this.model, this.findDistanceForKeywordSpotting);\n\n    // Calculate the minimum confidence\n    var allResultsMinConfidence = this.keywordSpottingMinConfidence - 0.1 - (Math.max((allResults[0].noise * 1.25) - 1, 0) * 0.75);\n\n    // Final check for returning the results\n    if (allResults[0] !== undefined && allResults[0].confidence > allResultsMinConfidence) {\n        return allResults;\n    }\n\n    return null;\n};\n\n// Calculation functions\n\n/**\n * Normalizes an input array to a scale from 0 to 100.\n *\n * @param {Array} input\n * @private\n */\nJsSpeechRecognizer.prototype.normalizeInput = function(input) {\n    // Find the max in the fft array\n    var max = Math.max.apply(Math, input);\n\n    for (var i = 0; i < input.length; i++) {\n        input[i] = Math.floor((input[i] / max) * 100);\n    }\n};\n\n/**\n * Finds the closest matches for an input, for a specified model.\n * Uses specified findDistance function, or a default one.\n *\n * @param {Array} input\n * @param {Number} numResults\n * @param {Object} speechModel\n * @param {Function} findDistance\n * @return {Array}\n * @private\n */\nJsSpeechRecognizer.prototype.findClosestMatch = function(input, numResults, speechModel, findDistanceFunction) {\n\n    var i = 0;\n    var key = \"\";\n    var allResults = [];\n\n    // If no findDistance function is defined, use the default\n    if (findDistanceFunction === undefined) {\n        findDistanceFunction = this.findDistanceFunction;\n    }\n\n    // Loop through all the keys in the model\n    for (key in speechModel) {\n        // Loop through all entries for that key\n        for (i = 0; i < speechModel[key].length; i++) {\n\n            var curDistance = findDistanceFunction(input, speechModel[key][i]);\n            var curConfidence = this.calcConfidence(curDistance, speechModel[key][i]);\n            var curNoise = this.calculateNoise(input, speechModel[key][i]);\n\n            var newResult = {};\n            newResult.match = key;\n            newResult.confidence = curConfidence;\n            newResult.noise = curNoise;\n            newResult.frameCount = speechModel[key][i].length;\n            allResults.push(newResult);\n        }\n\n    }\n\n    allResults.sort(function(a, b) { return b.confidence - a.confidence; });\n\n    if (numResults === -1) {\n        return allResults;\n    }\n\n    return allResults.slice(0, numResults);\n};\n\n/**\n * Computes the sum of differances between an input and a modelEntry.\n *\n * @param {Array} input\n * @param {Array} modelEntry\n * @return {Number}\n * @private\n */\nJsSpeechRecognizer.prototype.findDistance = function(input, modelEntry) {\n    var i = 0;\n    var distance = 0;\n\n    for (i = 0; i < Math.max(input.length, modelEntry.length); i++) {\n        var modelVal = modelEntry[i] || 0;\n        var inputVal = input[i] || 0;\n        distance += Math.abs(modelVal - inputVal);\n    }\n\n    return distance;\n};\n\n/**\n * Will generate a distanceForKeywordSpotting function.\n * The function will calculate differences for entries in the model that\n * are greater than the parameter modelEntryGreaterThanVal.\n *\n * @param {Number} modelEntryGreaterThanVal\n * @return {Function}\n * @private\n */\nJsSpeechRecognizer.prototype.generateFindDistanceForKeywordSpotting = function(modelEntryGreaterThanVal) {\n\n    /**\n     * Calculates the keyword spotting distance an input is from a model entry.\n     *\n     * @param {Array} input\n     * @param {Array} modelEntry\n     * @return {Number}\n     * @private\n     */\n    return function(input, modelEntry) {\n        var i = 0;\n        var distance = 0;\n\n        // Compare from the end of the input, for modelEntry.length entries\n        for (i = 1; i <= modelEntry.length; i++) {\n            var modelVal = modelEntry[modelEntry.length - i] || 0;\n            var inputVal = input[input.length - i] || 0;\n            if (modelVal > modelEntryGreaterThanVal) {\n                distance += Math.abs(modelVal - inputVal);\n            }\n        }\n\n        return distance;\n    };\n};\n\n/**\n * Calculates a confidence value based on the distance form a model entry.\n * Max confidence is 1, min is negative infinity.\n *\n * @param {Number} distance\n * @param {Array} modelEntry\n * @return {Number}\n * @private\n */\nJsSpeechRecognizer.prototype.calcConfidence = function(distance, modelEntry) {\n    var sum = 0;\n    var i = 0;\n\n    for (i = 0; i < modelEntry.length; i++) {\n        sum += modelEntry[i];\n    }\n\n    return (1 - (distance / sum));\n};\n\n/**\n * Calculates how noisy an input is compared to a model entry.\n *\n * @param {Array} input\n * @param {Array} modelEntry\n * @return {Number}\n * @private\n */\nJsSpeechRecognizer.prototype.calculateNoise = function(input, modelEntry) {\n    var i = 0;\n    var sumIn = 0;\n    var sumEntry = 0;\n\n    // Compare from the end of the input, for modelEntry.length entries\n    for (i = 1; i <= modelEntry.length; i++) {\n        var modelVal = modelEntry[modelEntry.length - i] || 0;\n        var inputVal = input[input.length - i] || 0;\n        sumIn += inputVal * inputVal;\n\n        // TODO: Optimize by caching the calculation for the model\n        sumEntry += modelVal * modelVal;\n    }\n\n    return (sumIn / sumEntry);\n};\n\nexport default JsSpeechRecognizer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/JsSpeechRecognizer.js"],"sourceRoot":""}